name: connectivity-test to GCP GSM

on:
#  push:
#    branches:
#      - "main"
  workflow_dispatch:


jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
#          token_format: 'access_token'
#      - name: Google Auth
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account:  ${{ secrets.WIF_SERVICE_ACCOUNT }}

#      - name: Get secrets from GSM
      - id: 'secret'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            token:atlantean-petal-309613/GITHUB_TOKEN
            github_token:atlantean-petal-309613/GITHUB_TOKEN_PAT

#      - name: Get secrets from GSM
      - id: 'secret_jfrog'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            token_access:atlantean-petal-309613/JF_ACCESS_TOKEN
            token_url:atlantean-petal-309613/JF_URL
      

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'
      - run: | 
          echo "FJ_ACCESS_TOKEN=${{steps.secret_jfrog.outputs.token_access}}" >> $GITHUB_ENV
          echo "FJ_URL=${{steps.secret_jfrog.outputs.token_url}}" >> $GITHUB_ENV
          cat $GITHUB_ENV
          
      - name: repo checkout
        uses: actions/checkout@v3
        with:
          token: atlantean-petal-309613/GITHUB_TOKEN_PAT
          
     
            
#      - name: 'setup gcloud'
#        uses: 'google-github-actions/setup-gcloud@v1'

#      - id: 'gcloud'
#        name: 'gcloud'
#        run:  |-
#          gcloud secrets versions access "2" --secret "GITHUB_TOKEN"


#       - id: 'gcloud'
#         name: 'gcloud'
#         run:  |-
#           gcloud secrets list --project=atlantean-petal-309613


      - id: "publish"
        run: |
          echo "${{ steps.secret.outputs.token }}"
            


        
      # NOTE: Alternative option - authentication via credentials json
      # - name: Google Auth
      #   id: auth
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}''

      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

#      # Authenticate Docker to Google Cloud Artifact Registry
#      - name: Build and Push Container
#        run: |-
#          ./gradlew jib --image="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

#      - name: Deploy to Cloud Run
#        id: deploy
#        run: |-
#          gcloud run deploy ${{ env.SERVICE }} \
#            --image ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE }}:${{ github.sha }} \
#            --quiet \
#            --platform managed \
#            --region ${{ env.REGION }} \
#            --project ${{ env.PROJECT_ID }} \
#            --format json \
#            --update-env-vars SERVICE_NAME="Card Service" \
#            --update-secrets DB_DATABASE=DB_DATABASE:latest \
#            --update-secrets DB_USERNAME=DB_USERNAME:2 \
#            --update-secrets DB_PASSWORD=DB_PASSWORD:2 \
#            --update-secrets DB_CLOUD_SQL_INSTANCE=DB_CLOUD_SQL_INSTANCE:1 \
#            --service-account card-service-cloudrun@noted-ensign-357703.iam.gserviceaccount.com \
#            --allow-unauthenticated

      # If required, use the Cloud Run url output in later steps
#      - name: Show Output
#        run: echo ${{ steps.deploy.outputs.url }}
